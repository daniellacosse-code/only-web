{"version":3,"file":"rust-81a3203e.js","sources":["../../../../pages/rust.vue"],"sourcesContent":["<script setup>\nimport Conway__init, { Universe } from \"@only-web/conway\";\n\nconst wasm = ref(null);\nconst {\n  public: { rust, BITS_PER_BYTE }\n} = useAppConfig();\n\nconst container = ref(null);\n\nlet game = null;\nlet gameLoopID = null;\nconst isPlaying = ref(false);\n\nconst grid = ref(null);\nlet canvas = null;\nlet [width, height] = [0, 0];\nlet indexCache = [];\n\nconst cellBorderWidth = rust.sizeCell + 1;\n\nonMounted(async () => {\n  await nextTick();\n\n  wasm.value = await Conway__init();\n\n  width = Math.ceil(container.value.offsetWidth / cellBorderWidth);\n  height = Math.ceil(container.value.offsetHeight / cellBorderWidth);\n\n  game = Universe.new(width, height);\n  indexCache = Array.from(new Array(height), () => new Array(width));\n\n  grid.value.width = width * cellBorderWidth + 1;\n  grid.value.height = height * cellBorderWidth + 1;\n\n  canvas = grid.value.getContext(\"2d\");\n  canvas.strokeStyle = rust.colorDefault;\n  canvas.fillStyle = rust.colorDefault;\n\n  redrawGame();\n});\n\nonUnmounted(() => {\n  pauseGame();\n  game.destroy();\n});\n\nfunction redrawGame() {\n  canvas.clearRect(0, 0, grid.value.width, grid.value.height);\n\n  // TODO: can I move these into here and only stroke once?\n  redrawGrid();\n  redrawCells();\n}\n\nfunction redrawGrid() {\n  let [row, column] = [width, height];\n\n  canvas.beginPath();\n\n  while (row--) {\n    canvas.moveTo(row * cellBorderWidth + 1, 0);\n    canvas.lineTo(row * cellBorderWidth + 1, height * cellBorderWidth + 1);\n  }\n\n  while (column--) {\n    canvas.moveTo(0, column * cellBorderWidth + 1);\n    canvas.lineTo(width * cellBorderWidth + 1, column * cellBorderWidth + 1);\n  }\n\n  // I AM THE STORM THAT IS APPROACHING\n  canvas.stroke();\n}\n\nfunction redrawCells() {\n  const cellPointer = game.cells();\n  const cells = new Uint8Array(\n    wasm.value.memory.buffer,\n    cellPointer,\n    (width * height) / BITS_PER_BYTE\n  );\n\n  const getIndex = (row, column) =>\n    indexCache[row][column] !== undefined\n      ? indexCache[row][column]\n      : (indexCache[row][column] = row * width + column);\n\n  const isCellAlive = (row, column, cells) => {\n    const index = getIndex(row, column);\n    const byteIndex = Math.floor(index / BITS_PER_BYTE);\n    const byteMask = 1 << index % BITS_PER_BYTE;\n\n    return (cells[byteIndex] & byteMask) === byteMask;\n  };\n\n  canvas.beginPath();\n\n  let row = height;\n  while (row--) {\n    let column = width;\n    while (column--) {\n      if (isCellAlive(row, column, cells)) {\n        canvas.fillRect(\n          column * cellBorderWidth + 1,\n          row * cellBorderWidth + 1,\n          cellBorderWidth,\n          cellBorderWidth\n        );\n      }\n    }\n  }\n\n  canvas.stroke();\n}\n\nfunction startGame() {\n  game.tick();\n  redrawGame();\n  isPlaying.value = true;\n  gameLoopID = requestAnimationFrame(startGame);\n}\n\nfunction pauseGame() {\n  cancelAnimationFrame(gameLoopID);\n  isPlaying.value = false;\n  gameLoopID = null;\n}\n\nfunction cellToggle({ clientX, clientY }) {\n  const { width, height, left, top } = grid.value.getBoundingClientRect();\n\n  const [scaleX, scaleY] = [\n    grid.value.width / width,\n    grid.value.height / height\n  ];\n  const [canvasLeft, canvasTop] = [\n    (clientX - left) * scaleX,\n    (clientY - top) * scaleY\n  ];\n  const [row, column] = [\n    Math.min(Math.floor(canvasTop / cellBorderWidth), height - 1),\n    Math.min(Math.floor(canvasLeft / cellBorderWidth), width - 1)\n  ];\n\n  game.toggle_cell(row, column);\n  redrawGame();\n}\n</script>\n\n<template>\n  <div class=\"Game__container\" ref=\"container\">\n    <canvas class=\"Game\" ref=\"grid\" @click=\"cellToggle\" />\n\n    <div class=\"Game__controlsContainer\">\n      <button v-if=\"isPlaying\" @click.stop.prevent=\"() => pauseGame()\">\n        ⏸ pause\n      </button>\n\n      <button v-else variant=\"primary\" @click.stop.prevent=\"() => startGame()\">\n        ▶️ play\n      </button>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.Game__container {\n  display: block;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  position: fixed;\n  background-color: white;\n}\n\n.Game__controlsContainer {\n  align-items: center;\n  bottom: 0;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  padding: var(--size-large);\n  position: fixed;\n  margin-bottom: var(--size-huge);\n  width: 100%;\n}\n</style>\n"],"names":["rust"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAGA,QAAA,IAAA;AACA,UAAA;AAAA,MACA,QAAA,EAAA,MAAAA,OAAA,cAAA;AAAA,IACA,IAAA,aAAA;AAEA,UAAA,YAAA,IAAA,IAAA;AAEA,QAAA,OAAA;AACA,QAAA,aAAA;AACA,UAAA,YAAA,IAAA,KAAA;AAEA,QAAA,IAAA;AAKA,IAAAA,MAAA,WAAA;AAuBA,gBAAA,MAAA;AACA;AACA,WAAA,QAAA;AAAA,IACA,CAAA;AA6EA,aAAA,YAAA;AACA,2BAAA,UAAA;AACA,gBAAA,QAAA;AACA,mBAAA;AAAA,IACA;;;;;;;;;;;;;;;;;;;;;;;"}