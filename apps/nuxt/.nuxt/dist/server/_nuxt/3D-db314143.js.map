{"version":3,"file":"3D-db314143.js","sources":["../../../../pages/3D.vue"],"sourcesContent":["<script setup>\nimport {\n  Game,\n  GameScene,\n  GameSceneCamera,\n  GameSceneLight,\n  GameSceneActor,\n  GameStage,\n  combineTransforms\n} from \"@only-web/game\";\n\nconst {\n  public: { threeDimensional }\n} = useAppConfig();\n\nconst canvas = ref(null);\nconst game = ref(null);\n\nonMounted(() => {\n  // Currently the stage must be set before the game is created, due to playcanvas' internal architecture.\n  // I will not make the stage a positional argument, however, to keep our API more flexible.\n\n  // We may want multiple stages to support split screen, for instance.\n  // Or no stage, to run a separate non-blocking simulation in a service worker.\n  const mainStage = new GameStage({ stageElement: canvas.value });\n\n  const mainScene = new GameScene({\n    actors: {\n      cube: new GameSceneActor({\n        name: \"Cube\",\n        model: \"box\",\n        behaviors: {\n          idleRotation: ({ self, deltaTime }) => {\n            self.transform = combineTransforms(self.transform, {\n              rotation: {\n                x: threeDimensional.rotationSpeedCube.x * deltaTime,\n                y: threeDimensional.rotationSpeedCube.y * deltaTime,\n                z: threeDimensional.rotationSpeedCube.z * deltaTime\n              }\n            });\n          }\n        }\n      })\n    },\n    backdrop: threeDimensional.colorBackground,\n    cameras: {\n      main: new GameSceneCamera({\n        name: \"Main Camera\",\n        transform: {\n          position: threeDimensional.positionCamera\n        }\n      })\n    },\n    lights: {\n      main: new GameSceneLight({\n        name: \"Main Light\",\n        transform: {\n          rotation: threeDimensional.rotationLight\n        }\n      })\n    }\n  });\n\n  game.value = new Game({\n    scenes: {\n      main: mainScene\n    },\n    // TODO: stages?\n    stage: mainStage\n  });\n\n  game.value.play();\n});\n\nonUnmounted(() => game.value.pause());\n</script>\n\n<template>\n  <div class=\"ThreeDimensionalCanvas__container\">\n    <canvas ref=\"canvas\" class=\"ThreeDimensionalCanvas\"></canvas>\n  </div>\n</template>\n\n<style scoped>\n.ThreeDimensionalCanvas__container {\n  height: 100%;\n  overflow: hidden;\n  position: absolute;\n  width: 100%;\n}\n\n.ThreeDimensionalCanvas {\n  left: 0;\n  position: absolute;\n  top: 0;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAaA,iBAAA;AAEA,QAAA,IAAA;AACA,UAAA,OAAA,IAAA,IAAA;AA0DA,gBAAA,MAAA,KAAA,MAAA,MAAA,CAAA;;;;;;;;;;;;;"}