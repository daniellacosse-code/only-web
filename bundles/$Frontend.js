const __default = { userAgent: { engine: { Chrome: "74", Edge: "79", Safari: "14.5", Firefox: "90", Opera: "62" } } }; const __default1 = (template, ...insertions)=>{ const wrapper = globalThis.document.createElement("div"); wrapper.innerHTML = $Shared.handleTemplate({ template, insertions, handleInsertion: (insertion)=>{ if (insertion instanceof HTMLCollection) { let collectionHTML = ""; for (const element of insertion)collectionHTML += element.outerHTML; return collectionHTML; } if (insertion instanceof HTMLElement) return insertion.outerHTML; return $Shared.HTML.escape(Array.isArray(insertion) ? insertion.join("") : String(insertion)); } }); return wrapper.children; }; const __default2 = (tag, options)=>{ if (globalThis.customElements.get(tag)) return $Shared.Log({ message: `Element ${tag} already registered.`, level: "warn" }); if (typeof options === "function") { options = { handleBuild: options }; } const { buildAttributes = {}, handleBuild, handleMount = ()=>{}, handleDismount = ()=>{} } = options; globalThis.customElements.define(tag, class extends HTMLElement { static observedAttributes = Object.keys(buildAttributes); #eventController = new AbortController(); #handleMount; #handleTemplateBuild; #handleDismount; constructor(){ super(); this.#handleMount = handleMount.bind(this); this.#handleTemplateBuild = handleBuild.bind(this); this.#handleDismount = handleDismount.bind(this); this.template = this.attachShadow({ mode: "open" }); this.buildAttributes = new Proxy({}, { deleteProperty: (_, name)=>{ this.removeAttribute(String(name)); return true; }, get: (_, name)=>this.#RESOLVE_ATTRIBUTE(String(name), this.getAttribute(String(name))), set: (_, name, value)=>{ this.setAttribute(String(name), this.#RESOLVE_ATTRIBUTE(String(name), value)); return true; } }); } connectedCallback() { $Shared.Log({ message: `[framework/frontend/element] <${tag}> mounted`, level: "debug" }); this.#buildTemplate(); requestAnimationFrame(()=>this.#handleMount(this.buildAttributes ?? {})); } attributeChangedCallback(name, oldValue, newValue) { $Shared.Log({ message: `[framework/frontend/element] <${tag}> attributes changed`, detail: { name, oldValue, newValue }, level: "debug" }); this.#buildTemplate(); } disconnectedCallback() { $Shared.Log({ message: `[framework/frontend/element] <${tag}> dismounted`, level: "debug" }); this.#handleDismount(this.buildAttributes ?? {}); this.#eventController.abort(); } addEventListener(eventType, listener, options) { $Shared.Log({ message: `[framework/frontend/element] <${tag}> listener added for "${eventType}" event`, level: "debug" }); super.addEventListener(eventType, (event)=>{ event.stopPropagation(); event.preventDefault(); Object.defineProperty(event, "target", { writable: false, value: event.composedPath().find((target)=>target.getAttribute?.("id")) }); let message = `[framework/frontend/element] <${tag}> listener for "${eventType}"`; const element = event.target; if (event.target) message += ` triggered by internal <${element.tagName.toLocaleLowerCase()}>`; $Shared.Log({ message, detail: { event }, level: "debug" }); return listener(event); }, { signal: this.#eventController.signal, ...options }); } querySelector(selector) { return this.template.querySelector(selector); } #buildTemplate() { if (!this.template) { $Shared.Log({ message: `[framework/frontend/element#UPDATE_TEMPLATE] <${tag}> template not yet initialized, skipping update`, level: "debug" }); return; } $Shared.Log({ message: `[framework/frontend/element#UPDATE_TEMPLATE] updating template for <${tag}>`, level: "debug" }); const templateResult = this.#handleTemplateBuild(this.buildAttributes ?? {}) ?? __default1`<slot></slot>`; const templateWrapper = __default1`<template> <style> *:not(slot) { all: initial; box-sizing: border-box;  isolation: isolate; touch-action: none; user-select: none; } style, script { display: none; } </style> ${templateResult} </template>`; this.template.replaceChildren(...templateWrapper); const newTemplateNode = this.template.querySelector("template"); if (!newTemplateNode) { $Shared.Log({ message: `[framework/frontend/element#UPDATE_TEMPLATE] <${tag}> template missing <template> tag, cannot update template`, level: "warn" }); return; } this.template.append(newTemplateNode.content.cloneNode(true)); $Shared.Log({ message: `[framework/frontend/element#UPDATE_TEMPLATE] <${tag}> template updated`, level: "debug" }); } #RESOLVE_ATTRIBUTE(name, value) { const resolver = buildAttributes[name] ?? String; if (value === null) return void 0; if (resolver === Boolean) return this.#RESOLVE_BOOLEAN_ATTRIBUTE(value); return resolver(value); } #RESOLVE_BOOLEAN_ATTRIBUTE(value) { switch(value){ case "true": case "": return true; case "false": return false; default: return Boolean(value); } } }); }; globalThis.$Frontend = { requirements: __default, Element: { Register: __default2, html: __default1 } }; const __default3 = globalThis.$Frontend; export { __default3 as default };